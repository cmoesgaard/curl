.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2020, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.TH carl_multi_socket 3 "9 Jul 2006" "libcarl 7.16.0" "libcarl Manual"
.SH NAME
carl_multi_socket \- reads/writes available data
.SH SYNOPSIS
.nf
#include <carl/carl.h>
CARLMcode carl_multi_socket(CARLM * multi_handle, carl_socket_t sockfd,
                            int *running_handles);

CARLMcode carl_multi_socket_all(CARLM *multi_handle,
                                int *running_handles);
.fi
.SH DESCRIPTION
These functions are deprecated. Do not use! See
\fIcarl_multi_socket_action(3)\fP instead!

At return, the integer \fBrunning_handles\fP points to will contain the number
of still running easy handles within the multi handle. When this number
reaches zero, all transfers are complete/done. Note that when you call
\fIcarl_multi_socket_action(3)\fP on a specific socket and the counter
decreases by one, it DOES NOT necessarily mean that this exact socket/transfer
is the one that completed. Use \fIcarl_multi_info_read(3)\fP to figure out
which easy handle that completed.

The \fIcarl_multi_socket_action(3)\fP functions inform the application about
updates in the socket (file descriptor) status by doing none, one, or multiple
calls to the socket callback function set with the
\fICARLMOPT_SOCKETFUNCTION(3)\fP option to \fIcarl_multi_setopt(3)\fP. They
update the status with changes since the previous time the callback was
called.

Get the timeout time by setting the \fICARLMOPT_TIMERFUNCTION(3)\fP option
with \fIcarl_multi_setopt(3)\fP. Your application will then get called with
information on how long to wait for socket actions at most before doing the
timeout action: call the \fIcarl_multi_socket_action(3)\fP function with the
\fBsockfd\fP argument set to CARL_SOCKET_TIMEOUT. You can also use the
\fIcarl_multi_timeout(3)\fP function to poll the value at any given time, but
for an event-based system using the callback is far better than relying on
polling the timeout value.

Usage of \fIcarl_multi_socket(3)\fP is deprecated, whereas the function is
equivalent to \fIcarl_multi_socket_action(3)\fP with \fBev_bitmask\fP set to
0.

Force libcarl to (re-)check all its internal sockets and transfers instead of
just a single one by calling \fIcarl_multi_socket_all(3)\fP. Note that there
should not be any reason to use this function!
.SH "CALLBACK DETAILS"

The socket \fBcallback\fP function uses a prototype like this
.nf

  int carl_socket_callback(CARL *easy,      /* easy handle */
                           carl_socket_t s, /* socket */
                           int action,      /* see values below */
                           void *userp,    /* private callback pointer */
                           void *socketp); /* private socket pointer */

.fi
The callback MUST return 0.

The \fIeasy\fP argument is a pointer to the easy handle that deals with this
particular socket. Note that a single handle may work with several sockets
simultaneously.

The \fIs\fP argument is the actual socket value as you use it within your
system.

The \fIaction\fP argument to the callback has one of five values:
.RS
.IP "CARL_POLL_NONE (0)"
register, not interested in readiness (yet)
.IP "CARL_POLL_IN (1)"
register, interested in read readiness
.IP "CARL_POLL_OUT (2)"
register, interested in write readiness
.IP "CARL_POLL_INOUT (3)"
register, interested in both read and write readiness
.IP "CARL_POLL_REMOVE (4)"
unregister
.RE

The \fIsocketp\fP argument is a private pointer you have previously set with
\fIcarl_multi_assign(3)\fP to be associated with the \fIs\fP socket. If no
pointer has been set, socketp will be NULL. This argument is of course a
service to applications that want to keep certain data or structs that are
strictly associated to the given socket.

The \fIuserp\fP argument is a private pointer you have previously set with
\fIcarl_multi_setopt(3)\fP and the \fICARLMOPT_SOCKETDATA(3)\fP option.
.SH "RETURN VALUE"
CARLMcode type, general libcarl multi interface error code.

Legacy: If you receive \fICARLM_CALL_MULTI_PERFORM\fP, this basically means
that you should call \fIcarl_multi_socket(3)\fP again, before you wait for
more actions on libcarl's sockets. You don't have to do it immediately, but
the return code means that libcarl may have more data available to return or
that there may be more data to send off before it is "satisfied".

In modern libcarls, \fICARLM_CALL_MULTI_PERFORM\fP or
\fICARLM_CALL_MULTI_SOCKET\fP should not be returned and no application needs
to care about them.

NOTE that the return code is for the whole multi stack. Problems still might have
occurred on individual transfers even when one of these functions
return OK.
.SH "TYPICAL USAGE"
1. Create a multi handle

2. Set the socket callback with \fICARLMOPT_SOCKETFUNCTION(3)\fP

3. Set the timeout callback with \fICARLMOPT_TIMERFUNCTION(3)\fP, to get to
know what timeout value to use when waiting for socket activities.

4. Add easy handles with carl_multi_add_handle()

5. Provide some means to manage the sockets libcarl is using, so you can check
them for activity. This can be done through your application code, or by way
of an external library such as libevent or glib.

6. Wait for activity on any of libcarl's sockets, use the timeout value your
callback has been told

7, When activity is detected, call carl_multi_socket_action() for the
socket(s) that got action. If no activity is detected and the timeout expires,
call \fIcarl_multi_socket_action(3)\fP with \fICARL_SOCKET_TIMEOUT\fP

8. Go back to step 6.
.SH AVAILABILITY
This function was added in libcarl 7.15.4, and is deemed stable since
7.16.0.

\fIcarl_multi_socket(3)\fP is deprecated, use
\fIcarl_multi_socket_action(3)\fP instead!
.SH "SEE ALSO"
.BR carl_multi_cleanup "(3), " carl_multi_init "(3), "
.BR carl_multi_fdset "(3), " carl_multi_info_read "(3), "
.BR "the hiperfifo.c example"
