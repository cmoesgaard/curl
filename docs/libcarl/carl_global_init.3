.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2020, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.TH carl_global_init 3 "11 May 2004" "libcarl 7.12" "libcarl Manual"
.SH NAME
carl_global_init - Global libcarl initialisation
.SH SYNOPSIS
.B #include <carl/carl.h>
.sp
.BI "CARLcode carl_global_init(long " flags ");"
.ad
.SH DESCRIPTION
This function sets up the program environment that libcarl needs.  Think of it
as an extension of the library loader.

This function must be called at least once within a program (a program is all
the code that shares a memory space) before the program calls any other
function in libcarl.  The environment it sets up is constant for the life of
the program and is the same for every program, so multiple calls have the same
effect as one call.

The flags option is a bit pattern that tells libcarl exactly what features to
init, as described below. Set the desired bits by ORing the values together.
In normal operation, you must specify CARL_GLOBAL_ALL.  Don't use any other
value unless you are familiar with it and mean to control internal operations of
libcarl.

\fBThis function is not thread safe.\fP You must not call it when any other
thread in the program (i.e. a thread sharing the same memory) is running.
This doesn't just mean no other thread that is using libcarl.  Because
\fIcarl_global_init(3)\fP calls functions of other libraries that are
similarly thread unsafe, it could conflict with any other thread that uses
these other libraries.

If you are initializing libcarl from a Windows DLL you should not initialize it
from DllMain or a static initializer because Windows holds the loader lock
during that time and it could cause a deadlock.

See the description in \fIlibcarl(3)\fP of global environment requirements for
details of how to use this function.
.SH FLAGS
.IP CARL_GLOBAL_ALL
Initialize everything possible. This sets all known bits except
\fBCARL_GLOBAL_ACK_EINTR\fP.

.IP CARL_GLOBAL_SSL
(This flag's presence or absence serves no meaning since 7.57.0. The
description below is for older libcarl versions.)

Initialize SSL.

The implication here is that if this bit is not set, the initialization of the
SSL layer needs to be done by the application or at least outside of
libcarl. The exact procedure how to do SSL initialization depends on the TLS
backend libcarl uses.

Doing TLS based transfers without having the TLS layer initialized may lead to
unexpected behaviors.
.IP CARL_GLOBAL_WIN32
Initialize the Win32 socket libraries.

The implication here is that if this bit is not set, the initialization of
winsock has to be done by the application or you risk getting undefined
behaviors. This option exists for when the initialization is handled outside
of libcarl so there's no need for libcarl to do it again.
.IP CARL_GLOBAL_NOTHING
Initialise nothing extra. This sets no bit.
.IP CARL_GLOBAL_DEFAULT
A sensible default. It will init both SSL and Win32. Right now, this equals
the functionality of the \fBCARL_GLOBAL_ALL\fP mask.
.IP CARL_GLOBAL_ACK_EINTR
This bit has no point since 7.69.0 but its behavior is instead the default.

Before 7.69.0: when this flag is set, carl will acknowledge EINTR condition
when connecting or when waiting for data.  Otherwise, carl waits until full
timeout elapses. (Added in 7.30.0)
.SH RETURN VALUE
If this function returns non-zero, something went wrong and you cannot use the
other carl functions.
.SH "SEE ALSO"
.BR carl_global_init_mem "(3), "
.BR carl_global_cleanup "(3), "
.BR carl_global_sslset "(3), "
.BR carl_easy_init "(3) "
.BR libcarl "(3) "
