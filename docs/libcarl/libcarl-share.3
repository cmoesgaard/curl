.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2020, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.TH libcarl-share 3 "8 Aug 2003" "libcarl 7.10.7" "libcarl share interface"
.SH NAME
libcarl-share \- how to use the share interface
.SH DESCRIPTION
This is an overview on how to use the libcarl share interface in your C
programs. There are specific man pages for each function mentioned in
here.

All functions in the share interface are prefixed with carl_share.

.SH "OBJECTIVES"
The share interface was added to enable sharing of data between carl
\&"handles".
.SH "ONE SET OF DATA - MANY TRANSFERS"
You can have multiple easy handles share data between them. Have them update
and use the \fBsame\fP cookie database, DNS cache, TLS session cache and/or
connection cache! This way, each single transfer will take advantage from data
updates made by the other transfer(s).
.SH "SHARE OBJECT"
You create a shared object with \fIcarl_share_init(3)\fP. It returns a handle
for a newly created one.

You tell the shared object what data you want it to share by using
\fIcarl_share_setopt(3)\fP.

Since you can use this share from multiple threads, and libcarl has no
internal thread synchronization, you must provide mutex callbacks if you're
using this multi-threaded. You set lock and unlock functions with
\fIcarl_share_setopt(3)\fP too.

Then, you make an easy handle to use this share, you set the
\fICARLOPT_SHARE(3)\fP option with \fIcarl_easy_setopt(3)\fP, and pass in
share handle. You can make any number of easy handles share the same share
handle.

To make an easy handle stop using that particular share, you set
\fICARLOPT_SHARE(3)\fP to NULL for that easy handle. To make a handle stop
sharing a particular data, you can \fICARLSHOPT_UNSHARE\fP it.

When you're done using the share, make sure that no easy handle is still using
it, and call \fIcarl_share_cleanup(3)\fP on the handle.
.SH "SEE ALSO"
.BR carl_share_init "(3), " carl_share_setopt "(3), " carl_share_cleanup "(3)"
.BR libcarl-errors "(3), " libcarl-easy "(3), " libcarl-multi "(3) "
