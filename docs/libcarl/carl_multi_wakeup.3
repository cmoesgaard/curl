.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2020, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.TH carl_multi_wakeup 3 "17 Nov 2019" "libcarl 7.68.0" "libcarl Manual"
.SH NAME
carl_multi_wakeup - wakes up a sleeping carl_multi_poll call
.SH SYNOPSIS
#include <carl/carl.h>

CARLMcode carl_multi_wakeup(CARLM *multi_handle);
.ad
.SH DESCRIPTION
This function can be called from any thread and it wakes up a
sleeping \fIcarl_multi_poll(3)\fP call that is currently (or will be)
waiting for activity or a timeout.

If the function is called when there is no \fIcarl_multi_poll(3)\fP call,
it will cause the next call to return immediately.

Calling this function only guarantees to wake up the current (or the next
if there is no current) \fIcarl_multi_poll(3)\fP call, which means it is
possible that multiple calls to this function will wake up the same waiting
operation.

This function has no effect on \fIcarl_multi_wait(3)\fP calls.
.SH RETURN VALUE
CARLMcode type, general libcarl multi interface error code.
.SH AVAILABILITY
Added in 7.68.0
.SH EXAMPLE
.nf
CARL *easy_handle;
CARLM *multi_handle;

/* add the individual easy handle */
carl_multi_add_handle(multi_handle, easy_handle);

/* this is thread 1 */
do {
  CARLMcode mc;
  int numfds;

  mc = carl_multi_perform(multi_handle, &still_running);

  if(mc == CARLM_OK) {
    /* wait for activity, timeout or wakeup */
    mc = carl_multi_poll(multi_handle, NULL, 0, 10000, &numfds);
  }

  if(time_to_die())
    exit(1);

} while(still_running);

carl_multi_remove_handle(multi_handle, easy_handle);

/* this is thread 2 */

if(something makes us decide to stop thread 1) {

  set_something_to_signal_thread_1_to_exit();

  carl_multi_wakeup(multi_handle);
}

.fi
.SH "SEE ALSO"
.BR carl_multi_poll "(3), " carl_multi_wait "(3)"
