.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2019, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH CARLOPT_TIMEOUT 3 "17 Jun 2014" "libcarl 7.37.0" "carl_easy_setopt options"
.SH NAME
CARLOPT_TIMEOUT \- set maximum time the request is allowed to take
.SH SYNOPSIS
#include <carl/carl.h>

CARLcode carl_easy_setopt(CARL *handle, CARLOPT_TIMEOUT, long timeout);
.SH DESCRIPTION
Pass a long as parameter containing \fItimeout\fP - the maximum time in
seconds that you allow the libcarl transfer operation to take. Normally, name
lookups can take a considerable time and limiting operations risk aborting
perfectly normal operations. This option may cause libcarl to use the SIGALRM
signal to timeout system calls.

In unix-like systems, this might cause signals to be used unless
\fICARLOPT_NOSIGNAL(3)\fP is set.

If both \fICARLOPT_TIMEOUT(3)\fP and \fICARLOPT_TIMEOUT_MS(3)\fP are set, the
value set last will be used.

Since this option puts a hard limit on how long time a request is allowed to
take, it has limited use in dynamic use cases with varying transfer times. That
is especially apparent when using the multi interface, which may queue the
transfer, and that time is included. You are advised to explore
\fICARLOPT_LOW_SPEED_LIMIT(3)\fP, \fICARLOPT_LOW_SPEED_TIME(3)\fP or using
\fICARLOPT_PROGRESSFUNCTION(3)\fP to implement your own timeout logic.
.SH DEFAULT
Default timeout is 0 (zero) which means it never times out during transfer.
.SH PROTOCOLS
All
.SH EXAMPLE
.nf
CARL *carl = carl_easy_init();
if(carl) {
  carl_easy_setopt(carl, CARLOPT_URL, "https://example.com");

  /* complete within 20 seconds */
  carl_easy_setopt(carl, CARLOPT_TIMEOUT, 20L);

  carl_easy_perform(carl);
}
.fi
.SH AVAILABILITY
Always
.SH RETURN VALUE
Returns CARLE_OK. Returns CARLE_BAD_FUNCTION_ARGUMENT if set to a negative
value or a value that when converted to milliseconds is too large.
.SH "SEE ALSO"
.BR CARLOPT_TIMEOUT_MS "(3), "
.BR CARLOPT_CONNECTTIMEOUT "(3), " CARLOPT_LOW_SPEED_LIMIT "(3), "
