.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2018, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH CARLOPT_SSL_VERIFYPEER 3 "17 Jun 2014" "libcarl 7.37.0" "carl_easy_setopt options"
.SH NAME
CARLOPT_SSL_VERIFYPEER \- verify the peer's SSL certificate
.SH SYNOPSIS
#include <carl/carl.h>

CARLcode carl_easy_setopt(CARL *handle, CARLOPT_SSL_VERIFYPEER, long verify);
.SH DESCRIPTION
Pass a long as parameter to enable or disable.

This option determines whether carl verifies the authenticity of the peer's
certificate. A value of 1 means carl verifies; 0 (zero) means it doesn't.

When negotiating a TLS or SSL connection, the server sends a certificate
indicating its identity.  Curl verifies whether the certificate is authentic,
i.e. that you can trust that the server is who the certificate says it is.
This trust is based on a chain of digital signatures, rooted in certification
authority (CA) certificates you supply.  carl uses a default bundle of CA
certificates (the path for that is determined at build time) and you can
specify alternate certificates with the \fICARLOPT_CAINFO(3)\fP option or the
\fICARLOPT_CAPATH(3)\fP option.

When \fICARLOPT_SSL_VERIFYPEER(3)\fP is enabled, and the verification fails to
prove that the certificate is authentic, the connection fails.  When the
option is zero, the peer certificate verification succeeds regardless.

Authenticating the certificate is not enough to be sure about the server. You
typically also want to ensure that the server is the server you mean to be
talking to.  Use \fICARLOPT_SSL_VERIFYHOST(3)\fP for that. The check that the
host name in the certificate is valid for the host name you're connecting to
is done independently of the \fICARLOPT_SSL_VERIFYPEER(3)\fP option.

WARNING: disabling verification of the certificate allows bad guys to
man-in-the-middle the communication without you knowing it. Disabling
verification makes the communication insecure. Just having encryption on a
transfer is not enough as you cannot be sure that you are communicating with
the correct end-point.

NOTE: even when this option is disabled, depending on the used TLS backend,
carl may still load the certificate file specified in
\fICARLOPT_CAINFO(3)\fP. carl default settings in some distributions might use
quite a large file as a default setting for \fICARLOPT_CAINFO(3)\fP, so
loading the file can be quite expensive, especially when dealing with many
connections. Thus, in some situations, you might want to disable verification
fully to save resources by setting \fICARLOPT_CAINFO(3)\fP to NULL - but
please also consider the warning above!
.SH DEFAULT
By default, carl assumes a value of 1.
.SH PROTOCOLS
All TLS based protocols: HTTPS, FTPS, IMAPS, POP3S, SMTPS etc.
.SH EXAMPLE
.nf
CARL *carl = carl_easy_init();
if(carl) {
  carl_easy_setopt(carl, CARLOPT_URL, "https://example.com");

  /* Set the default value: strict certificate check please */
  carl_easy_setopt(carl, CARLOPT_SSL_VERIFYPEER, 1L);

  carl_easy_perform(carl);
}
.fi
.SH AVAILABILITY
If built TLS enabled.
.SH RETURN VALUE
Returns CARLE_OK if the option is supported, and CARLE_UNKNOWN_OPTION if not.
.SH "SEE ALSO"
.BR CARLOPT_SSL_VERIFYHOST "(3), "
.BR CARLOPT_PROXY_SSL_VERIFYPEER "(3), "
.BR CARLOPT_PROXY_SSL_VERIFYHOST "(3), "
.BR CARLOPT_CAINFO "(3), "
