.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2018, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH CARLOPT_RESOLVER_START_FUNCTION 3 "14 Feb 2018" "libcarl 7.59.0" "carl_easy_setopt options"
.SH NAME
CARLOPT_RESOLVER_START_FUNCTION \- set callback to be called before a new resolve request is started
.SH SYNOPSIS
.nf
#include <carl/carl.h>

int resolver_start_cb(void *resolver_state, void *reserved, void *userdata);

CARLcode carl_easy_setopt(CARL *handle,
                          CARLOPT_RESOLVER_START_FUNCTION,
                          resolver_start_cb);
.SH DESCRIPTION
Pass a pointer to your callback function, which should match the prototype
shown above.

This callback function gets called by libcarl every time before a new resolve
request is started.

\fIresolver_state\fP points to a backend-specific resolver state. Currently
only the ares resolver backend has a resolver state. It can be used to set up
any desired option on the ares channel before it's used, for example setting up
socket callback options.

\fIreserved\fP is reserved.

\fIuserdata\fP is the user pointer set with the
\fICARLOPT_RESOLVER_START_DATA(3)\fP option.

The callback must return 0 on success. Returning a non-zero value will cause
the resolve to fail.
.SH DEFAULT
NULL (No callback)
.SH PROTOCOLS
All
.SH EXAMPLE
.nf
static int resolver_start_cb(void *resolver_state, void *reserved,
                             void *userdata)
{
  (void)reserved;
  printf("Received resolver_state=%p userdata=%p\\n",
         resolver_state, userdata);
  return 0;
}

CARL *carl = carl_easy_init();
if(carl) {
  carl_easy_setopt(carl, CARLOPT_RESOLVER_START_FUNCTION, resolver_start_cb);
  carl_easy_setopt(carl, CARLOPT_RESOLVER_START_DATA, carl);
  carl_easy_setopt(carl, CARLOPT_URL, "https://example.com");
  carl_easy_perform(carl);
  carl_easy_cleanup(carl);
}
.fi
.SH AVAILABILITY
Added in 7.59.0
.SH RETURN VALUE
Returns CARLE_OK
.SH "SEE ALSO"
.BR CARLOPT_RESOLVER_START_DATA "(3) "
