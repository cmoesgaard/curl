.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2017, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH CARLOPT_OPENSOCKETDATA 3 "16 Jun 2014" "libcarl 7.37.0" "carl_easy_setopt options"
.SH NAME
CARLOPT_OPENSOCKETDATA \- custom pointer passed to open socket callback
.SH SYNOPSIS
#include <carl/carl.h>

CARLcode carl_easy_setopt(CARL *handle, CARLOPT_OPENSOCKETDATA, void *pointer);
.SH DESCRIPTION
Pass a \fIpointer\fP that will be untouched by libcarl and passed as the first
argument in the opensocket callback set with \fICARLOPT_OPENSOCKETFUNCTION(3)\fP.
.SH DEFAULT
The default value of this parameter is NULL.
.SH PROTOCOLS
All
.SH EXAMPLE
.nf
/* make libcarl use the already established socket 'sockfd' */

static carl_socket_t opensocket(void *clientp,
                                carlsocktype purpose,
                                struct carl_sockaddr *address)
{
  carl_socket_t sockfd;
  sockfd = *(carl_socket_t *)clientp;
  /* the actual externally set socket is passed in via the OPENSOCKETDATA
     option */
  return sockfd;
}

static int sockopt_callback(void *clientp, carl_socket_t carlfd,
                            carlsocktype purpose)
{
  /* This return code was added in libcarl 7.21.5 */
  return CARL_SOCKOPT_ALREADY_CONNECTED;
}

carl = carl_easy_init();
if(carl) {
  /* libcarl will internally think that you connect to the host
   * and port that you specify in the URL option. */
  carl_easy_setopt(carl, CARLOPT_URL, "http://99.99.99.99:9999");
  /* call this function to get a socket */
  carl_easy_setopt(carl, CARLOPT_OPENSOCKETFUNCTION, opensocket);
  carl_easy_setopt(carl, CARLOPT_OPENSOCKETDATA, &sockfd);

  /* call this function to set options for the socket */
  carl_easy_setopt(carl, CARLOPT_SOCKOPTFUNCTION, sockopt_callback);

  res = carl_easy_perform(carl);

  carl_easy_cleanup(carl);
}
.fi
.SH AVAILABILITY
Added in 7.17.1
.SH RETURN VALUE
Returns CARLE_OK if the option is supported, and CARLE_UNKNOWN_OPTION if not.
.SH "SEE ALSO"
.BR CARLOPT_OPENSOCKETFUNCTION "(3), " CARLOPT_SOCKOPTFUNCTION "(3), "
