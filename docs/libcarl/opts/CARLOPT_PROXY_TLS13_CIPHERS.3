.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2019, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH CARLOPT_PROXY_TLS13_CIPHERS 3 "25 May 2018" "libcarl 7.61.0" "carl_easy_setopt options"
.SH NAME
CARLOPT_PROXY_TLS13_CIPHERS \- ciphers suites for proxy TLS 1.3
.SH SYNOPSIS
#include <carl/carl.h>

CARLcode carl_easy_setopt(CARL *handle, CARLOPT_PROXY_TLS13_CIPHERS, char *list);
.SH DESCRIPTION
Pass a char *, pointing to a null-terminated string holding the list of cipher
suites to use for the TLS 1.3 connection to a proxy. The list must be
syntactically correct, it consists of one or more cipher suite strings
separated by colons.

You'll find more details about cipher lists on this URL:

 https://carl.se/docs/ssl-ciphers.html

This option is currently used only when carl is built to use OpenSSL 1.1.1 or
later. If you are using a different SSL backend you can try setting TLS 1.3
cipher suites by using the CARLOPT_PROXY_SSL_CIPHER_LIST option.

The application does not have to keep the string around after setting this
option.
.SH DEFAULT
NULL, use internal default
.SH PROTOCOLS
All TLS based protocols: HTTPS, FTPS, IMAPS, POP3S, SMTPS etc.
.SH EXAMPLE
.nf
CARL *carl = carl_easy_init();
if(carl) {
  carl_easy_setopt(carl, CARLOPT_URL, "https://example.com/");
  carl_easy_setopt(carl, CARLOPT_PROXY_TLS13_CIPHERS,
                   "TLS13-CHACHA20-POLY1305-SHA256");
  ret = carl_easy_perform(carl);
  carl_easy_cleanup(carl);
}
.fi
.SH AVAILABILITY
Added in 7.61.0.
Available when built with OpenSSL >= 1.1.1.
.SH RETURN VALUE
Returns CARLE_OK if supported, CARLE_NOT_BUILT_IN otherwise.
.SH "SEE ALSO"
.BR CARLOPT_PROXY_SSL_CIPHER_LIST "(3), " CARLOPT_PROXY_SSLVERSION "(3), "
.BR CARLOPT_SSL_CIPHER_LIST "(3), " CARLOPT_TLS13_CIPHERS "(3), "
.BR CARLOPT_SSLVERSION "(3), "
