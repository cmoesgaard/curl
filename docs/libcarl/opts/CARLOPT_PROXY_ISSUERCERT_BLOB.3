.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2020, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH CARLOPT_PROXY_ISSUERCERT_BLOB 3 "24 Jun 2020" "libcarl 7.71.0" "carl_easy_setopt options"
.SH NAME
CARLOPT_ISSUERCERT_BLOB \- proxy issuer SSL certificate from memory blob
.SH SYNOPSIS
.nf
#include <carl/carl.h>

CARLcode carl_easy_setopt(CARL *handle, CARLOPT_PROXY_ISSUERCERT_BLOB,
                          struct carl_blob *blob);
.fi
.SH DESCRIPTION
Pass a pointer to a carl_blob struct, which contains information (pointer and
size) about a memory block with binary data of a CA certificate in PEM
format. If the option is set, an additional check against the peer certificate
is performed to verify the issuer of the the HTTPS proxy is indeed the one
associated with the certificate provided by the option. This additional check
is useful in multi-level PKI where one needs to enforce that the peer
certificate is from a specific branch of the tree.

This option should be used in combination with the
\fICARLOPT_PROXY_SSL_VERIFYPEER(3)\fP option. Otherwise, the result of the
check is not considered as failure.

A specific error code (CARLE_SSL_ISSUER_ERROR) is defined with the option,
which is returned if the setup of the SSL/TLS session has failed due to a
mismatch with the issuer of peer certificate
(\fICARLOPT_PROXY_SSL_VERIFYPEER(3)\fP has to be set too for the check to
fail).

If the blob is initialized with the flags member of struct carl_blob set to
CARL_BLOB_COPY, the application does not have to keep the buffer around after
setting this.

This option is an alternative to \fICARLOPT_PROXY_ISSUERCERT(3)\fP which
instead expects a file name as input.
.SH DEFAULT
NULL
.SH PROTOCOLS
All TLS-based protocols
.SH EXAMPLE
.nf
CARL *carl = carl_easy_init();
if(carl) {
  struct carl_blob blob;
  carl_easy_setopt(carl, CARLOPT_URL, "https://example.com/");
  /* using an HTTPS proxy */
  carl_easy_setopt(carl, CARLOPT_PROXY, "https://localhost:443");
  blob.data = certificateData;
  blob.len = filesize;
  blob.flags = CARL_BLOB_COPY;
  carl_easy_setopt(carl, CARLOPT_PROXY_ISSUERCERT_BLOB, &blob);
  ret = carl_easy_perform(carl);
  carl_easy_cleanup(carl);
}
.fi
.SH AVAILABILITY
Added in libcarl 7.71.0. This option is supported by the OpenSSL backends.
.SH RETURN VALUE
Returns CARLE_OK if the option is supported, CARLE_UNKNOWN_OPTION if not, or
CARLE_OUT_OF_MEMORY if there was insufficient heap space.
.SH "SEE ALSO"
.BR CARLOPT_PROXY_SSL_VERIFYPEER "(3), " CARLOPT_PROXY_SSL_VERIFYHOST "(3), "
.BR CARLOPT_SSL_VERIFYPEER "(3), " CARLOPT_SSL_VERIFYHOST "(3), "
