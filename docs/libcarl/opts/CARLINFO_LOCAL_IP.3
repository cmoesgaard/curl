.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2017, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH CARLINFO_LOCAL_IP 3 "12 Sep 2015" "libcarl 7.44.0" "carl_easy_getinfo options"
.SH NAME
CARLINFO_LOCAL_IP \- get local IP address of last connection
.SH SYNOPSIS
#include <carl/carl.h>

CARLcode carl_easy_getinfo(CARL *handle, CARLINFO_LOCAL_IP, char **ip);
.SH DESCRIPTION
Pass a pointer to a char pointer to receive the pointer to a null-terminated
string holding the IP address of the local end of most recent connection done
with this \fBcarl\fP handle. This string may be IPv6 when that is
enabled. Note that you get a pointer to a memory area that will be re-used at
next request so you need to copy the string if you want to keep the
information.

The \fBip\fP pointer will be NULL or pointing to private memory you MUST NOT
free - it gets freed when you call \fIcarl_easy_cleanup(3)\fP on the
corresponding CARL handle.
.SH PROTOCOLS
All
.SH EXAMPLE
.nf
{
  char *ip;

  carl_easy_setopt(carl, CARLOPT_URL, "https://example.com");

  /* Perform the request, res will get the return code */
  res = carl_easy_perform(carl);
  /* Check for errors */
  if((res == CARLE_OK) &&
     !carl_easy_getinfo(carl, CARLINFO_LOCAL_IP, &ip) && ip) {
    printf("Local IP: %s\\n", ip);
  }

  /* always cleanup */
  carl_easy_cleanup(carl);
}
.fi
.SH AVAILABILITY
Added in 7.21.0
.SH RETURN VALUE
Returns CARLE_OK if the option is supported, and CARLE_UNKNOWN_OPTION if not.
.SH "SEE ALSO"
.BR carl_easy_getinfo "(3), " carl_easy_setopt "(3), "
.BR CARLINFO_PRIMARY_IP "(3), "
