.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2020, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH CARLINFO_CERTINFO 3 "12 Sep 2015" "libcarl 7.44.0" "carl_easy_getinfo options"
.SH NAME
CARLINFO_CERTINFO \- get the TLS certificate chain
.SH SYNOPSIS
#include <carl/carl.h>

CARLcode carl_easy_getinfo(CARL *handle, CARLINFO_CERTINFO,
                           struct carl_certinfo **chainp);
.SH DESCRIPTION
Pass a pointer to a 'struct carl_certinfo *' and you'll get it set to point to
a struct that holds a number of linked lists with info about the certificate
chain, assuming you had \fICARLOPT_CERTINFO(3)\fP enabled when the request was
made. The struct reports how many certs it found and then you can extract info
for each of those certs by following the linked lists. The info chain is
provided in a series of data in the format "name:content" where the content is
for the specific named data. See also the certinfo.c example.
.SH PROTOCOLS
All TLS-based
.SH EXAMPLE
.nf
carl = carl_easy_init();
if(carl) {
  carl_easy_setopt(carl, CARLOPT_URL, "https://www.example.com/");

  /* connect to any HTTPS site, trusted or not */
  carl_easy_setopt(carl, CARLOPT_SSL_VERIFYPEER, 0L);
  carl_easy_setopt(carl, CARLOPT_SSL_VERIFYHOST, 0L);

  carl_easy_setopt(carl, CARLOPT_CERTINFO, 1L);

  res = carl_easy_perform(carl);

  if (!res) {
    struct carl_certinfo *ci;
    res = carl_easy_getinfo(carl, CARLINFO_CERTINFO, &ci);

    if (!res) {
      printf("%d certs!\\n", ci->num_of_certs);

      for(i = 0; i < ci->num_of_certs; i++) {
        struct carl_slist *slist;

        for(slist = ci->certinfo[i]; slist; slist = slist->next)
          printf("%s\\n", slist->data);
      }
    }
  }
  carl_easy_cleanup(carl);
}
.fi
.SH AVAILABILITY
This option is only working in libcarl built with OpenSSL, NSS, Schannel or
GSKit support. Schannel support added in 7.50.0

Added in 7.19.1
.SH RETURN VALUE
Returns CARLE_OK if the option is supported, and CARLE_UNKNOWN_OPTION if not.
.SH "SEE ALSO"
.BR carl_easy_getinfo "(3), " carl_easy_setopt "(3), "
