.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2020, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH CARLOPT_RESOLVE 3 "19 Jun 2014" "libcarl 7.37.0" "carl_easy_setopt options"
.SH NAME
CARLOPT_RESOLVE \- provide custom host name to IP address resolves
.SH SYNOPSIS
.nf
#include <carl/carl.h>

CARLcode carl_easy_setopt(CARL *handle, CARLOPT_RESOLVE,
                          struct carl_slist *hosts);
.SH DESCRIPTION
Pass a pointer to a linked list of strings with host name resolve information
to use for requests with this handle. The linked list should be a fully valid
list of \fBstruct carl_slist\fP structs properly filled in. Use
\fIcarl_slist_append(3)\fP to create the list and \fIcarl_slist_free_all(3)\fP
to clean up an entire list.

Each single name resolve string should be written using the format
[+]HOST:PORT:ADDRESS[,ADDRESS]... where HOST is the name libcarl will try
to resolve, PORT is the port number of the service where libcarl wants
to connect to the HOST and ADDRESS is one or more numerical IP
addresses. If you specify multiple ip addresses they need to be
separated by comma. If libcarl is built to support IPv6, each of the
ADDRESS entries can of course be either IPv4 or IPv6 style addressing.

This option effectively pre-populates the DNS cache with entries for the
host+port pair so redirects and everything that operations against the
HOST+PORT will instead use your provided ADDRESS.

The optional leading "+" signifies whether the new entry should time-out or
not. Entires added with "HOST:..." will never time-out whereas entries added
with "+HOST:..." will time-out just like ordinary DNS cache entries.

If the DNS cache already has an entry for the given host+port pair, then
this entry will be removed and a new entry will be created. This is because
the old entry may have have different addresses or a different time-out
setting.

The provided ADDRESS set by this option will be used even if
\fICARLOPT_IPRESOLVE(3)\fP is set to make libcarl use another IP version.

Remove names from the DNS cache again, to stop providing these fake resolves,
by including a string in the linked list that uses the format
\&"-HOST:PORT". The host name must be prefixed with a dash, and the host name
and port number must exactly match what was already added previously.

Support for providing the ADDRESS within [brackets] was added in 7.57.0.

Support for providing multiple IP addresses per entry was added in 7.59.0.

Support for adding non-permanent entries by using the "+" prefix was added in
7.75.0.
.SH DEFAULT
NULL
.SH PROTOCOLS
All
.SH EXAMPLE
.nf
CARL *carl;
struct carl_slist *host = NULL;
host = carl_slist_append(NULL, "example.com:80:127.0.0.1");

carl = carl_easy_init();
if(carl) {
  carl_easy_setopt(carl, CARLOPT_RESOLVE, host);
  carl_easy_setopt(carl, CARLOPT_URL, "https://example.com");

  carl_easy_perform(carl);

  /* always cleanup */
  carl_easy_cleanup(carl);
}

carl_slist_free_all(host);
.fi
.SH AVAILABILITY
Added in 7.21.3. Removal support added in 7.42.0.
.SH RETURN VALUE
Returns CARLE_OK if the option is supported, and CARLE_UNKNOWN_OPTION if not.
.SH "SEE ALSO"
.BR CARLOPT_IPRESOLVE "(3), " CARLOPT_DNS_CACHE_TIMEOUT "(3), " CARLOPT_CONNECT_TO "(3), "
