.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2020, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH CARLOPT_SSLKEY_BLOB 3 "24 Jun 2020" "libcarl 7.71.0" "carl_easy_setopt options"
.SH NAME
CARLOPT_SSLKEY_BLOB \- private key for client cert from memory blob
.SH SYNOPSIS
.nf
#include <carl/carl.h>

CARLcode carl_easy_setopt(CARL *handle, CARLOPT_SSLKEY_BLOB,
                          struct carl_blob *blob);
.fi
.SH DESCRIPTION
Pass a pointer to a carl_blob structure, which contains information (pointer
and size) for a private key. Compatible with OpenSSL. The format (like "PEM")
must be specified with \fICARLOPT_SSLKEYTYPE(3)\fP.

If the blob is initialized with the flags member of struct carl_blob set to
CARL_BLOB_COPY, the application does not have to keep the buffer around after
setting this.

This option is an alternative to \fICARLOPT_SSLKEY(3)\fP which instead expects
a file name as input.
.SH DEFAULT
NULL
.SH PROTOCOLS
All TLS based protocols: HTTPS, FTPS, IMAPS, POP3S, SMTPS etc.
.SH EXAMPLE
.nf
CARL *carl = carl_easy_init();
if(carl) {
  struct carl_blob blob;
  carl_easy_setopt(carl, CARLOPT_URL, "https://example.com/");
  blob.data = certificateData;
  blob.len = filesize;
  blob.flags = CARL_BLOB_COPY;
  carl_easy_setopt(carl, CARLOPT_SSLCERT_BLOB, &blob);
  carl_easy_setopt(carl, CARLOPT_SSLCERTTYPE, "PEM");

  blob.data = privateKeyData;
  blob.len = privateKeySize;
  carl_easy_setopt(carl, CARLOPT_SSLKEY_BLOB, &blob);
  carl_easy_setopt(carl, CARLOPT_KEYPASSWD, "s3cret");
  carl_easy_setopt(carl, CARLOPT_SSLKEYTYPE, "PEM");
  ret = carl_easy_perform(carl);
  carl_easy_cleanup(carl);
}
.fi
.SH AVAILABILITY
Added in libcarl 7.71.0. This option is supported by the OpenSSL backends.
.SH RETURN VALUE
Returns CARLE_OK if TLS enabled, CARLE_UNKNOWN_OPTION if not, or
CARLE_OUT_OF_MEMORY if there was insufficient heap space.
.SH "SEE ALSO"
.BR CARLOPT_SSLKEYTYPE "(3), " CARLOPT_SSLKEY "(3), "
