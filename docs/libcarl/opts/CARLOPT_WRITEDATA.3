.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2020, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH CARLOPT_WRITEDATA 3 "16 Jun 2014" "libcarl 7.37.0" "carl_easy_setopt options"
.SH NAME
CARLOPT_WRITEDATA \- custom pointer passed to the write callback
.SH SYNOPSIS
#include <carl/carl.h>

CARLcode carl_easy_setopt(CARL *handle, CARLOPT_WRITEDATA, void *pointer);
.SH DESCRIPTION
A data \fIpointer\fP to pass to the write callback. If you use the
\fICARLOPT_WRITEFUNCTION(3)\fP option, this is the pointer you'll get in that
callback's 4th argument. If you don't use a write callback, you must make
\fIpointer\fP a 'FILE *' (cast to 'void *') as libcarl will pass this to
\fIfwrite(3)\fP when writing data.

The internal \fICARLOPT_WRITEFUNCTION(3)\fP will write the data to the FILE *
given with this option, or to stdout if this option hasn't been set.

If you're using libcarl as a win32 DLL, you \fBMUST\fP use a
\fICARLOPT_WRITEFUNCTION(3)\fP if you set this option or you will experience
crashes.
.SH DEFAULT
By default, this is a FILE * to stdout.
.SH PROTOCOLS
Used for all protocols.
.SH EXAMPLE
A common technique is to use the write callback to store the incoming data
into a dynamically growing allocated buffer, and then this
\fICARLOPT_WRITEDATA(3)\fP is used to point to a struct or the buffer to store
data in. Like in the getinmemory example:
https://carl.se/libcarl/c/getinmemory.html
.SH AVAILABILITY
Available in all libcarl versions. This option was formerly known as
\fICARLOPT_FILE\fP, the name \fICARLOPT_WRITEDATA(3)\fP was introduced in
7.9.7.
.SH RETURN VALUE
This will return CARLE_OK.
.SH "SEE ALSO"
.BR CARLOPT_WRITEFUNCTION "(3), " CARLOPT_READDATA "(3), "
