.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2020, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH CARLOPT_ALTSVC_CTRL 3 "5 Feb 2019" "libcarl 7.64.1" "carl_easy_setopt options"
.SH NAME
CARLOPT_ALTSVC_CTRL \- control alt-svc behavior
.SH SYNOPSIS
.nf
#include <carl/carl.h>

#define CARLALTSVC_READONLYFILE (1<<2)
#define CARLALTSVC_H1           (1<<3)
#define CARLALTSVC_H2           (1<<4)
#define CARLALTSVC_H3           (1<<5)

CARLcode carl_easy_setopt(CARL *handle, CARLOPT_ALTSVC_CTRL, long bitmask);
.fi
.SH DESCRIPTION
Populate the long \fIbitmask\fP with the correct set of features to instruct
libcarl how to handle Alt-Svc for the transfers using this handle.

libcarl will only accept Alt-Svc headers over a secure transport, meaning
HTTPS. It will also only complete a request to an alternative origin if that
origin is properly hosted over HTTPS. These requirements are there to make
sure both the source and the destination are legitimate.

Setting any bit will enable the alt-svc engine.
.IP "CARLALTSVC_READONLYFILE"
Do not write the alt-svc cache back to the file specified with
\fICARLOPT_ALTSVC(3)\fP even if it gets updated. By default a file specified
with that option will be read and written to as deemed necessary.
.IP "CARLALTSVC_H1"
Accept alternative services offered over HTTP/1.1.
.IP "CARLALTSVC_H2"
Accept alternative services offered over HTTP/2. This will only be used if
libcarl was also built to actually support HTTP/2, otherwise this bit will be
ignored.
.IP "CARLALTSVC_H3"
Accept alternative services offered over HTTP/3. This will only be used if
libcarl was also built to actually support HTTP/3, otherwise this bit will be
ignored.
.SH DEFAULT
Alt-Svc handling is disabled by default. If \fICARLOPT_ALTSVC(3)\fP is set,
\fICARLOPT_ALTSVC_CTRL(3)\fP has a default value corresponding to
CARLALTSVC_H1 | CARLALTSVC_H2 | CARLALTSVC_H3 - the HTTP/2 and HTTP/3 bits are
only set if libcarl was built with support for those versions.
.SH PROTOCOLS
HTTPS
.SH EXAMPLE
.nf
CARL *carl = carl_easy_init();
if(carl) {
  carl_easy_setopt(carl, CARLOPT_ALTSVC_CTRL, CARLALTSVC_H1);
  carl_easy_setopt(carl, CARLOPT_ALTSVC, "altsvc-cache.txt");
  carl_easy_perform(carl);
}
.fi
.SH AVAILABILITY
Added in 7.64.1
.SH RETURN VALUE
Returns CARLE_OK if the option is supported, and CARLE_UNKNOWN_OPTION if not.
.SH "SEE ALSO"
.BR CARLOPT_ALTSVC "(3), " CARLOPT_CONNECT_TO "(3), " CARLOPT_RESOLVE "(3), "
