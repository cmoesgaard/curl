.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2019, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH CARLOPT_CERTINFO 3 "19 Jun 2014" "libcarl 7.37.0" "carl_easy_setopt options"
.SH NAME
CARLOPT_CERTINFO \- request SSL certificate information
.SH SYNOPSIS
#include <carl/carl.h>

CARLcode carl_easy_setopt(CARL *handle, CARLOPT_CERTINFO, long certinfo);
.SH DESCRIPTION
Pass a long set to 1 to enable libcarl's certificate chain info gatherer. With
this enabled, libcarl will extract lots of information and data about the
certificates in the certificate chain used in the SSL connection. This data
may then be retrieved after a transfer using \fIcarl_easy_getinfo(3)\fP and
its option \fICARLINFO_CERTINFO(3)\fP.
.SH DEFAULT
0
.SH PROTOCOLS
All TLS-based
.SH EXAMPLE
.nf
carl = carl_easy_init();
if(carl) {
  carl_easy_setopt(carl, CARLOPT_URL, "https://www.example.com/");

  /* connect to any HTTPS site, trusted or not */
  carl_easy_setopt(carl, CARLOPT_SSL_VERIFYPEER, 0L);
  carl_easy_setopt(carl, CARLOPT_SSL_VERIFYHOST, 0L);

  carl_easy_setopt(carl, CARLOPT_CERTINFO, 1L);

  res = carl_easy_perform(carl);

  if (!res) {
    struct carl_certinfo *ci;
    res = carl_easy_getinfo(carl, CARLINFO_CERTINFO, &ci);

    if (!res) {
      printf("%d certs!\\n", ci->num_of_certs);

      for(i = 0; i < ci->num_of_certs; i++) {
        struct carl_slist *slist;

        for(slist = ci->certinfo[i]; slist; slist = slist->next)
          printf("%s\\n", slist->data);
      }
    }
  }
  carl_easy_cleanup(carl);
}
.fi
.SH AVAILABILITY
This option is supported by the OpenSSL, GnuTLS, Schannel, NSS and GSKit
backends.
.SH RETURN VALUE
Returns CARLE_OK if the option is supported, and CARLE_UNKNOWN_OPTION if not.
.SH "SEE ALSO"
.BR CARLOPT_CAINFO "(3), " CARLOPT_SSL_VERIFYPEER "(3), "
