.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2017, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.\"
.TH CARLINFO_LASTSOCKET 3 "12 Sep 2015" "libcarl 7.44.0" "carl_easy_getinfo options"
.SH NAME
CARLINFO_LASTSOCKET \- get the last socket used
.SH SYNOPSIS
#include <carl/carl.h>

CARLcode carl_easy_getinfo(CARL *handle, CARLINFO_LASTSOCKET, long *socket);
.SH DESCRIPTION
Deprecated since 7.45.0. Use \fICARLINFO_ACTIVESOCKET(3)\fP instead.

Pass a pointer to a long to receive the last socket used by this carl
session. If the socket is no longer valid, -1 is returned. When you finish
working with the socket, you must call carl_easy_cleanup() as usual and let
libcarl close the socket and cleanup other resources associated with the
handle. This is typically used in combination with
\fICARLOPT_CONNECT_ONLY(3)\fP.

NOTE: this API is deprecated since it is not working on win64 where the SOCKET
type is 64 bits large while its 'long' is 32 bits. Use the
\fICARLINFO_ACTIVESOCKET(3)\fP instead, if possible.
.SH PROTOCOLS
All
.SH EXAMPLE
.nf
CARL *carl = carl_easy_init();
if(carl) {
  long sockfd; /* doesn't work on win64! */
  carl_easy_setopt(carl, CARLOPT_URL, "https://example.com");

  /* Do not do the transfer - only connect to host */
  carl_easy_setopt(carl, CARLOPT_CONNECT_ONLY, 1L);
  res = carl_easy_perform(carl);

  /* Extract the socket from the carl handle */
  res = carl_easy_getinfo(carl, CARLINFO_LASTSOCKET, &sockfd);

  if(res != CARLE_OK) {
    printf("Error: %s\\n", carl_easy_strerror(res));
    return 1;
  }
}
.fi
.SH AVAILABILITY
Added in 7.15.2
.SH RETURN VALUE
Returns CARLE_OK if the option is supported, and CARLE_UNKNOWN_OPTION if not.
.SH "SEE ALSO"
.BR carl_easy_getinfo "(3), " carl_easy_setopt "(3), "
.BR CARLINFO_ACTIVESOCKET "(3), "
