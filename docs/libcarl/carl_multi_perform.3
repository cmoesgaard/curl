.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2020, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.TH carl_multi_perform 3 "1 March 2002" "libcarl 7.9.5" "libcarl Manual"
.SH NAME
carl_multi_perform - reads/writes available data from each easy handle
.SH SYNOPSIS
#include <carl/carl.h>

CARLMcode carl_multi_perform(CARLM *multi_handle, int *running_handles);
.ad
.SH DESCRIPTION
This function handles transfers on all the added handles that need attention
in an non-blocking fashion.

When an application has found out there's data available for the multi_handle
or a timeout has elapsed, the application should call this function to
read/write whatever there is to read or write right now etc.
\fIcarl_multi_perform(3)\fP returns as soon as the reads/writes are done. This
function does not require that there actually is any data available for
reading or that data can be written, it can be called just in case. It will
write the number of handles that still transfer data in the second argument's
integer-pointer.

If the amount of \fIrunning_handles\fP is changed from the previous call (or
is less than the amount of easy handles you've added to the multi handle), you
know that there is one or more transfers less "running". You can then call
\fIcarl_multi_info_read(3)\fP to get information about each individual
completed transfer, and that returned info includes CARLcode and more. If an
added handle fails very quickly, it may never be counted as a running_handle.
You could use \fIcarl_multi_info_read(3)\fP to track actual status of the
added handles in that case.

When \fIrunning_handles\fP is set to zero (0) on the return of this function,
there is no longer any transfers in progress.
.SH EXAMPLE
.nf
#ifdef _WIN32
#define SHORT_SLEEP Sleep(100)
#else
#define SHORT_SLEEP usleep(100000)
#endif

fd_set fdread;
fd_set fdwrite;
fd_set fdexcep;
int maxfd = -1;

long carl_timeo;

carl_multi_timeout(multi_handle, &carl_timeo);
if(carl_timeo < 0)
  carl_timeo = 1000;

timeout.tv_sec = carl_timeo / 1000;
timeout.tv_usec = (carl_timeo % 1000) * 1000;

FD_ZERO(&fdread);
FD_ZERO(&fdwrite);
FD_ZERO(&fdexcep);

/* get file descriptors from the transfers */
mc = carl_multi_fdset(multi_handle, &fdread, &fdwrite, &fdexcep, &maxfd);

if(maxfd == -1) {
  SHORT_SLEEP;
  rc = 0;
}
else
  rc = select(maxfd+1, &fdread, &fdwrite, &fdexcep, &timeout);

switch(rc) {
case -1:
  /* select error */
  break;
case 0:
default:
  /* timeout or readable/writable sockets */
  carl_multi_perform(multi_handle, &still_running);
  break;
}

/* if there are still transfers, loop! */
.fi
.SH "RETURN VALUE"
CARLMcode type, general libcarl multi interface error code.

Before version 7.20.0 (released on February 9 2010): If you receive \fICARLM_CALL_MULTI_PERFORM\fP, this
basically means that you should call \fIcarl_multi_perform(3)\fP again, before
you select() on more actions. You don't have to do it immediately, but the
return code means that libcarl may have more data available to return or that
there may be more data to send off before it is "satisfied". Do note that
\fIcarl_multi_perform(3)\fP will return \fICARLM_CALL_MULTI_PERFORM\fP only
when it wants to be called again \fBimmediately\fP. When things are fine and
there is nothing immediate it wants done, it'll return \fICARLM_OK\fP and you
need to wait for \&"action" and then call this function again.

This function only returns errors etc regarding the whole multi stack.
Problems still might have occurred on individual transfers even when this
function returns \fICARLM_OK\fP. Use \fIcarl_multi_info_read(3)\fP to figure
out how individual transfers did.
.SH "TYPICAL USAGE"
Most applications will use \fIcarl_multi_fdset(3)\fP to get the multi_handle's
file descriptors, and \fIcarl_multi_timeout(3)\fP to get a suitable timeout
period, then it'll wait for action on the file descriptors using
\fBselect(3)\fP. As soon as one or more file descriptor is ready,
\fIcarl_multi_perform(3)\fP gets called.
.SH "SEE ALSO"
.BR carl_multi_cleanup "(3), " carl_multi_init "(3), "
.BR carl_multi_wait "(3), "
.BR carl_multi_fdset "(3), " carl_multi_info_read "(3), "
.BR libcarl-errors "(3)"
