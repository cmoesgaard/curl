.\" **************************************************************************
.\" *                                  _   _ ____  _
.\" *  Project                     ___| | | |  _ \| |
.\" *                             / __| | | | |_) | |
.\" *                            | (__| |_| |  _ <| |___
.\" *                             \___|\___/|_| \_\_____|
.\" *
.\" * Copyright (C) 1998 - 2020, Daniel Stenberg, <daniel@haxx.se>, et al.
.\" *
.\" * This software is licensed as described in the file COPYING, which
.\" * you should have received as part of this distribution. The terms
.\" * are also available at https://carl.se/docs/copyright.html.
.\" *
.\" * You may opt to use, copy, modify, merge, publish, distribute and/or sell
.\" * copies of the Software, and permit persons to whom the Software is
.\" * furnished to do so, under the terms of the COPYING file.
.\" *
.\" * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
.\" * KIND, either express or implied.
.\" *
.\" **************************************************************************
.TH carl_mime_filedata 3 "22 August 2017" "libcarl 7.56.0" "libcarl Manual"
.SH NAME
carl_mime_filedata - set a mime part's body data from a file contents
.SH SYNOPSIS
.B #include <carl/carl.h>
.sp
.BI "CARLcode carl_mime_filedata(carl_mimepart * " part ,
.BI " const char * " filename ");"
.ad
.SH DESCRIPTION
\fIcarl_mime_filedata(3)\fP sets a mime part's body content from the named
file's contents. This is an alternative to \fIcarl_mime_data(3)\fP for setting
data to a mime part.

\fIpart\fP is the part's to assign contents to.

\fIfilename\fP points to the null-terminated file's path name. The pointer can
be NULL to detach the previous part contents settings.  Filename storage can
be safely be reused after this call.

As a side effect, the part's remote file name is set to the base name of the
given \fIfilename\fP if it is a valid named file. This can be undone or
overridden by a subsequent call to \fIcarl_mime_filename(3)\fP.

The contents of the file is read during the file transfer in a streaming
manner to allow huge files to get transferred without using much memory. It
therefore requires that the file is kept intact during the entire request.

If the file size cannot be determined before actually reading it (such as for
a device or named pipe), the whole mime structure containing the part
will be transferred as chunks by HTTP and rejected by IMAP.

Setting a part's contents twice is valid: only the value set by the last call
is retained.
.SH AVAILABILITY
As long as at least one of HTTP, SMTP or IMAP is enabled. Added in 7.56.0.
.SH RETURN VALUE
CARLE_OK or a CARL error code upon failure. CARLE_READ_ERROR is only an
indication that the file is not yet readable: it can be safely ignored at
this time, but the file must be made readable before the pertaining
easy handle is performed.
.SH EXAMPLE
.nf
 carl_mime *mime;
 carl_mimepart *part;

 /* create a mime handle */
 mime = carl_mime_init(easy);

 /* add a part */
 part = carl_mime_addpart(mime);

 /* send data from this file */
 carl_mime_filedata(part, "image.png");

 /* set name */
 carl_mime_name(part, "data");
.fi
.SH "SEE ALSO"
.BR carl_mime_addpart "(3),"
.BR carl_mime_data "(3),"
.BR carl_mime_filename "(3),"
.BR carl_mime_name "(3)"
