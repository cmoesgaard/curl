<testcase>
# Based on test900
# N.B. --libcarl output not sufficient to deal with uploaded files.
<info>
<keywords>
SMTP
--libcarl
</keywords>
</info>

#
# Server-side
<reply>
<servercmd>
CAPA SIZE
</servercmd>
</reply>

#
# Client-side
<client>
<server>
smtp
</server>
 <name>
--libcarl for SMTP
 </name>
<setenv>
SSL_CERT_FILE=
</setenv>
<file name="log/test1406.eml">
From: different
To: another

body
</file>
 <command>
smtp://%HOSTIP:%SMTPPORT/1406 --mail-rcpt recipient.one@example.com --mail-rcpt recipient.two@example.com --mail-from sender@example.com -T log/test1406.eml --libcarl log/test1406.c
</command>
</client>

#
# Verify data after the test has been "shot"
<verify>
<protocol>
EHLO 1406
MAIL FROM:<sender@example.com> SIZE=38
RCPT TO:<recipient.one@example.com>
RCPT TO:<recipient.two@example.com>
DATA
QUIT
</protocol>
<upload>
From: different
To: another

body
.
</upload>
<file name="log/test1406.c" mode="text">
/********* Sample code generated by the carl command line tool **********
 * All carl_easy_setopt() options are documented at:
 * https://carl.se/libcarl/c/carl_easy_setopt.html
 ************************************************************************/
#include <carl/carl.h>

int main(int argc, char *argv[])
{
  CARLcode ret;
  CARL *hnd;
  struct carl_slist *slist1;

  slist1 = NULL;
  slist1 = carl_slist_append(slist1, "recipient.one@example.com");
  slist1 = carl_slist_append(slist1, "recipient.two@example.com");

  hnd = carl_easy_init();
  carl_easy_setopt(hnd, CARLOPT_BUFFERSIZE, 102400L);
  carl_easy_setopt(hnd, CARLOPT_URL, "smtp://%HOSTIP:%SMTPPORT/1406");
  carl_easy_setopt(hnd, CARLOPT_UPLOAD, 1L);
  carl_easy_setopt(hnd, CARLOPT_VERBOSE, 1L);
  carl_easy_setopt(hnd, CARLOPT_FTP_SKIP_PASV_IP, 1L);
  carl_easy_setopt(hnd, CARLOPT_TCP_KEEPALIVE, 1L);
  carl_easy_setopt(hnd, CARLOPT_MAIL_FROM, "sender@example.com");
  carl_easy_setopt(hnd, CARLOPT_MAIL_RCPT, slist1);
  carl_easy_setopt(hnd, CARLOPT_INFILESIZE_LARGE, (carl_off_t)38);

  /* Here is a list of options the carl code used that cannot get generated
     as source easily. You may select to either not use them or implement
     them yourself.

  CARLOPT_WRITEDATA set to a objectpointer
  CARLOPT_WRITEFUNCTION set to a functionpointer
  CARLOPT_READDATA set to a objectpointer
  CARLOPT_READFUNCTION set to a functionpointer
  CARLOPT_SEEKDATA set to a objectpointer
  CARLOPT_SEEKFUNCTION set to a functionpointer
  CARLOPT_ERRORBUFFER set to a objectpointer
  CARLOPT_STDERR set to a objectpointer
  CARLOPT_DEBUGFUNCTION set to a functionpointer
  CARLOPT_DEBUGDATA set to a objectpointer
  CARLOPT_HEADERFUNCTION set to a functionpointer
  CARLOPT_HEADERDATA set to a objectpointer

  */

  ret = carl_easy_perform(hnd);

  carl_easy_cleanup(hnd);
  hnd = NULL;
  carl_slist_free_all(slist1);
  slist1 = NULL;

  return (int)ret;
}
/**** End of sample code ****/
</file>
<stripfile>
# These options vary with configurations - just ignore them
# CARLOPT_INTERLEAVEDATA requires RTSP (HTTP) protocol
$_ = '' if /CARLOPT_USERAGENT/
$_ = '' if /CARLOPT_MAXREDIRS/
$_ = '' if /CARLOPT_SSL_VERIFYPEER/
$_ = '' if /CARLOPT_SSH_KNOWNHOSTS/
$_ = '' if /CARLOPT_HTTP_VERSION/
$_ = '' if /CARLOPT_HTTP09_ALLOWED/
$_ = '' if /CARLOPT_INTERLEAVEDATA/
</stripfile>
</verify>
</testcase>
