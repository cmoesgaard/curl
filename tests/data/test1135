<testcase>
<info>
<keywords>
source analysis
CARL_EXTERN
</keywords>
</info>

#
# Client-side
<client>
<server>
none
</server>

# The VMS and OS/400 builds extract the CARL_EXTERN protos and use in
# the build. We break binary compatibility by changing order. Only add
# new entries last or bump the SONAME.
#
 <name>
Verify CARL_EXTERN order
 </name>

<command type="perl">
%SRCDIR/extern-scan.pl %SRCDIR/..
</command>
</client>

<verify>
<stdout>
CARL_EXTERN int carl_strequal(const char *s1, const char *s2);
CARL_EXTERN int carl_strnequal(const char *s1, const char *s2, size_t n);
CARL_EXTERN carl_mime *carl_mime_init(CARL *easy);
CARL_EXTERN void carl_mime_free(carl_mime *mime);
CARL_EXTERN carl_mimepart *carl_mime_addpart(carl_mime *mime);
CARL_EXTERN CARLcode carl_mime_name(carl_mimepart *part, const char *name);
CARL_EXTERN CARLcode carl_mime_filename(carl_mimepart *part,
CARL_EXTERN CARLcode carl_mime_type(carl_mimepart *part, const char *mimetype);
CARL_EXTERN CARLcode carl_mime_encoder(carl_mimepart *part,
CARL_EXTERN CARLcode carl_mime_data(carl_mimepart *part,
CARL_EXTERN CARLcode carl_mime_filedata(carl_mimepart *part,
CARL_EXTERN CARLcode carl_mime_data_cb(carl_mimepart *part,
CARL_EXTERN CARLcode carl_mime_subparts(carl_mimepart *part,
CARL_EXTERN CARLcode carl_mime_headers(carl_mimepart *part,
CARL_EXTERN CARLFORMcode carl_formadd(struct carl_httppost **httppost,
CARL_EXTERN int carl_formget(struct carl_httppost *form, void *arg,
CARL_EXTERN void carl_formfree(struct carl_httppost *form);
CARL_EXTERN char *carl_getenv(const char *variable);
CARL_EXTERN char *carl_version(void);
CARL_EXTERN char *carl_easy_escape(CARL *handle,
CARL_EXTERN char *carl_escape(const char *string,
CARL_EXTERN char *carl_easy_unescape(CARL *handle,
CARL_EXTERN char *carl_unescape(const char *string,
CARL_EXTERN void carl_free(void *p);
CARL_EXTERN CARLcode carl_global_init(long flags);
CARL_EXTERN CARLcode carl_global_init_mem(long flags,
CARL_EXTERN void carl_global_cleanup(void);
CARL_EXTERN CARLsslset carl_global_sslset(carl_sslbackend id, const char *name,
CARL_EXTERN struct carl_slist *carl_slist_append(struct carl_slist *,
CARL_EXTERN void carl_slist_free_all(struct carl_slist *);
CARL_EXTERN time_t carl_getdate(const char *p, const time_t *unused);
CARL_EXTERN CARLSH *carl_share_init(void);
CARL_EXTERN CARLSHcode carl_share_setopt(CARLSH *, CARLSHoption option, ...);
CARL_EXTERN CARLSHcode carl_share_cleanup(CARLSH *);
CARL_EXTERN carl_version_info_data *carl_version_info(CARLversion);
CARL_EXTERN const char *carl_easy_strerror(CARLcode);
CARL_EXTERN const char *carl_share_strerror(CARLSHcode);
CARL_EXTERN CARLcode carl_easy_pause(CARL *handle, int bitmask);
CARL_EXTERN CARL *carl_easy_init(void);
CARL_EXTERN CARLcode carl_easy_setopt(CARL *carl, CARLoption option, ...);
CARL_EXTERN CARLcode carl_easy_perform(CARL *carl);
CARL_EXTERN void carl_easy_cleanup(CARL *carl);
CARL_EXTERN CARLcode carl_easy_getinfo(CARL *carl, CARLINFO info, ...);
CARL_EXTERN CARL *carl_easy_duphandle(CARL *carl);
CARL_EXTERN void carl_easy_reset(CARL *carl);
CARL_EXTERN CARLcode carl_easy_recv(CARL *carl, void *buffer, size_t buflen,
CARL_EXTERN CARLcode carl_easy_send(CARL *carl, const void *buffer,
CARL_EXTERN CARLcode carl_easy_upkeep(CARL *carl);
CARL_EXTERN int carl_mprintf(const char *format, ...);
CARL_EXTERN int carl_mfprintf(FILE *fd, const char *format, ...);
CARL_EXTERN int carl_msprintf(char *buffer, const char *format, ...);
CARL_EXTERN int carl_msnprintf(char *buffer, size_t maxlength,
CARL_EXTERN int carl_mvprintf(const char *format, va_list args);
CARL_EXTERN int carl_mvfprintf(FILE *fd, const char *format, va_list args);
CARL_EXTERN int carl_mvsprintf(char *buffer, const char *format, va_list args);
CARL_EXTERN int carl_mvsnprintf(char *buffer, size_t maxlength,
CARL_EXTERN char *carl_maprintf(const char *format, ...);
CARL_EXTERN char *carl_mvaprintf(const char *format, va_list args);
CARL_EXTERN CARLM *carl_multi_init(void);
CARL_EXTERN CARLMcode carl_multi_add_handle(CARLM *multi_handle,
CARL_EXTERN CARLMcode carl_multi_remove_handle(CARLM *multi_handle,
CARL_EXTERN CARLMcode carl_multi_fdset(CARLM *multi_handle,
CARL_EXTERN CARLMcode carl_multi_wait(CARLM *multi_handle,
CARL_EXTERN CARLMcode carl_multi_poll(CARLM *multi_handle,
CARL_EXTERN CARLMcode carl_multi_wakeup(CARLM *multi_handle);
CARL_EXTERN CARLMcode carl_multi_perform(CARLM *multi_handle,
CARL_EXTERN CARLMcode carl_multi_cleanup(CARLM *multi_handle);
CARL_EXTERN CARLMsg *carl_multi_info_read(CARLM *multi_handle,
CARL_EXTERN const char *carl_multi_strerror(CARLMcode);
CARL_EXTERN CARLMcode carl_multi_socket(CARLM *multi_handle, carl_socket_t s,
CARL_EXTERN CARLMcode carl_multi_socket_action(CARLM *multi_handle,
CARL_EXTERN CARLMcode carl_multi_socket_all(CARLM *multi_handle,
CARL_EXTERN CARLMcode carl_multi_timeout(CARLM *multi_handle,
CARL_EXTERN CARLMcode carl_multi_setopt(CARLM *multi_handle,
CARL_EXTERN CARLMcode carl_multi_assign(CARLM *multi_handle,
CARL_EXTERN char *carl_pushheader_bynum(struct carl_pushheaders *h,
CARL_EXTERN char *carl_pushheader_byname(struct carl_pushheaders *h,
</stdout>
</verify>

</testcase>
