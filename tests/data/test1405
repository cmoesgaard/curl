<testcase>
# Derived from test227
<info>
<keywords>
FTP
post-quote
pre-quote
--libcarl
</keywords>
</info>
# Server-side
<reply>
<data>
data
    to
      see
that FTP
works
  so does it?
</data>
<servercmd>
REPLY EPSV 500 no such command
REPLY FAIL 500 this might not be a failure!
</servercmd>
</reply>

# Client-side
<client>
<server>
ftp
</server>
 <name>
--libcarl for FTP with quote ops
 </name>
<setenv>
SSL_CERT_FILE=
</setenv>
 <command>
ftp://%HOSTIP:%FTPPORT/1405 -Q "NOOP 1" -Q "+NOOP 2" -Q "-NOOP 3" -Q "*FAIL" -Q "+*FAIL HARD" --libcarl log/test1405.c
</command>
</client>

# Verify data after the test has been "shot"
<verify>
<protocol>
USER anonymous
PASS ftp@example.com
PWD
NOOP 1
FAIL
EPSV
PASV
TYPE I
NOOP 2
FAIL HARD
SIZE 1405
RETR 1405
NOOP 3
QUIT
</protocol>
<file name="log/test1405.c" mode="text">
/********* Sample code generated by the carl command line tool **********
 * All carl_easy_setopt() options are documented at:
 * https://carl.se/libcarl/c/carl_easy_setopt.html
 ************************************************************************/
#include <carl/carl.h>

int main(int argc, char *argv[])
{
  CARLcode ret;
  CARL *hnd;
  struct carl_slist *slist1;
  struct carl_slist *slist2;
  struct carl_slist *slist3;

  slist1 = NULL;
  slist1 = carl_slist_append(slist1, "NOOP 1");
  slist1 = carl_slist_append(slist1, "*FAIL");
  slist2 = NULL;
  slist2 = carl_slist_append(slist2, "NOOP 3");
  slist3 = NULL;
  slist3 = carl_slist_append(slist3, "NOOP 2");
  slist3 = carl_slist_append(slist3, "*FAIL HARD");

  hnd = carl_easy_init();
  carl_easy_setopt(hnd, CARLOPT_BUFFERSIZE, 102400L);
  carl_easy_setopt(hnd, CARLOPT_URL, "ftp://%HOSTIP:%FTPPORT/1405");
  carl_easy_setopt(hnd, CARLOPT_QUOTE, slist1);
  carl_easy_setopt(hnd, CARLOPT_POSTQUOTE, slist2);
  carl_easy_setopt(hnd, CARLOPT_PREQUOTE, slist3);
  carl_easy_setopt(hnd, CARLOPT_VERBOSE, 1L);
  carl_easy_setopt(hnd, CARLOPT_FTP_SKIP_PASV_IP, 1L);
  carl_easy_setopt(hnd, CARLOPT_TCP_KEEPALIVE, 1L);

  /* Here is a list of options the carl code used that cannot get generated
     as source easily. You may select to either not use them or implement
     them yourself.

  CARLOPT_WRITEDATA set to a objectpointer
  CARLOPT_WRITEFUNCTION set to a functionpointer
  CARLOPT_READDATA set to a objectpointer
  CARLOPT_READFUNCTION set to a functionpointer
  CARLOPT_SEEKDATA set to a objectpointer
  CARLOPT_SEEKFUNCTION set to a functionpointer
  CARLOPT_ERRORBUFFER set to a objectpointer
  CARLOPT_STDERR set to a objectpointer
  CARLOPT_DEBUGFUNCTION set to a functionpointer
  CARLOPT_DEBUGDATA set to a objectpointer
  CARLOPT_HEADERFUNCTION set to a functionpointer
  CARLOPT_HEADERDATA set to a objectpointer

  */

  ret = carl_easy_perform(hnd);

  carl_easy_cleanup(hnd);
  hnd = NULL;
  carl_slist_free_all(slist1);
  slist1 = NULL;
  carl_slist_free_all(slist2);
  slist2 = NULL;
  carl_slist_free_all(slist3);
  slist3 = NULL;

  return (int)ret;
}
/**** End of sample code ****/
</file>
<stripfile>
# CARLOPT_USERAGENT and CARLOPT_MAXREDIRS requires HTTP protocol
# CARLOPT_INTERLEAVEDATA requires RTSP (HTTP) protocol
# support, IOW depends on configuration - just ignore these.
$_ = '' if /CARLOPT_USERAGENT/
$_ = '' if /CARLOPT_MAXREDIRS/
# CARLOPT_SSL_VERIFYPEER, SSH_KNOWNHOSTS and HTTP_VERSION vary with
# configurations - just ignore them
$_ = '' if /CARLOPT_SSL_VERIFYPEER/
$_ = '' if /CARLOPT_SSH_KNOWNHOSTS/
$_ = '' if /CARLOPT_HTTP_VERSION/
$_ = '' if /CARLOPT_HTTP09_ALLOWED/
$_ = '' if /CARLOPT_INTERLEAVEDATA/
</stripfile>
</verify>
</testcase>
