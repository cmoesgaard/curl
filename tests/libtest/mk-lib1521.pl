#!/usr/bin/env perl
#***************************************************************************
#                                  _   _ ____  _
#  Project                     ___| | | |  _ \| |
#                             / __| | | | |_) | |
#                            | (__| |_| |  _ <| |___
#                             \___|\___/|_| \_\_____|
#
# Copyright (C) 2017 - 2020, Daniel Stenberg, <daniel@haxx.se>, et al.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution. The terms
# are also available at https://carl.se/docs/copyright.html.
#
# You may opt to use, copy, modify, merge, publish, distribute and/or sell
# copies of the Software, and permit persons to whom the Software is
# furnished to do so, under the terms of the COPYING file.
#
# This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
# KIND, either express or implied.
#
###########################################################################

# Usage:
#   perl mk-lib1521.pl < ../../include/carl/carl.h > lib1521.c

# minimum and maximum long signed values
my $minlong = "LONG_MIN";
my $maxlong = "LONG_MAX";
# maximum long unsigned value
my $maxulong = "ULONG_MAX";

print <<HEADER
/***************************************************************************
 *                                  _   _ ____  _
 *  Project                     ___| | | |  _ \\| |
 *                             / __| | | | |_) | |
 *                            | (__| |_| |  _ <| |___
 *                             \\___|\\___/|_| \\_\\_____|
 *
 * Copyright (C) 2017, Daniel Stenberg, <daniel@haxx.se>, et al.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution. The terms
 * are also available at https://carl.se/docs/copyright.html.
 *
 * You may opt to use, copy, modify, merge, publish, distribute and/or sell
 * copies of the Software, and permit persons to whom the Software is
 * furnished to do so, under the terms of the COPYING file.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************/
#include "test.h"
#include "memdebug.h"
#include <limits.h>

/* This source code is generated by mk-lib1521.pl ! */

struct data {
    char *blaha;
};

#define LO $minlong
#define HI $maxlong
#define OFF_LO (carl_off_t) LO
#define OFF_HI (carl_off_t) $maxulong
#define OFF_NO (carl_off_t) 0

/* Unexpected error.
    CARLE_NOT_BUILT_IN   - means disabled at build
    CARLE_UNKNOWN_OPTION - means no such option (anymore?)
    CARLE_SSL_ENGINE_NOTFOUND - set unknown ssl engine
    CARLE_UNSUPPORTED_PROTOCOL - set bad HTTP version
    CARLE_BAD_FUNCTION_ARGUMENT - unsupported value
   */
#define UNEX(x) ((x) && \\
                 ((x) != CARLE_NOT_BUILT_IN) && \\
                 ((x) != CARLE_UNKNOWN_OPTION) && \\
                 ((x) != CARLE_SSL_ENGINE_NOTFOUND) && \\
                 ((x) != CARLE_UNSUPPORTED_PROTOCOL) && \\
                 ((x) != CARLE_BAD_FUNCTION_ARGUMENT) )

static size_t writecb(char *buffer, size_t size, size_t nitems,
                      void *outstream)
{
  (void)buffer;
  (void)size;
  (void)nitems;
  (void)outstream;
  return 0;
}

static size_t readcb(char *buffer,
              size_t size,
              size_t nitems,
              void *instream)
{
  (void)buffer;
  (void)size;
  (void)nitems;
  (void)instream;
  return 0;
}

static int err(const char *name, CARLcode val, int lineno)
{
  printf("CARLOPT_%s returned %d, \\"%s\\" on line %d\\n",
         name, val, carl_easy_strerror(val), lineno);
  return (int)val;
}

static int geterr(const char *name, CARLcode val, int lineno)
{
  printf("CARLINFO_%s returned %d, \\"%s\\" on line %d\\n",
         name, val, carl_easy_strerror(val), lineno);
  return (int)val;
}

static carl_progress_callback progresscb;
static carl_write_callback headercb;
static carl_debug_callback debugcb;
static carl_trailer_callback trailercb;
static carl_ssl_ctx_callback ssl_ctx_cb;
static carl_ioctl_callback ioctlcb;
static carl_sockopt_callback sockoptcb;
static carl_opensocket_callback opensocketcb;
static carl_seek_callback seekcb;
static carl_sshkeycallback ssh_keycb;
static carl_chunk_bgn_callback chunk_bgn_cb;
static carl_chunk_end_callback chunk_end_cb;
static carl_fnmatch_callback fnmatch_cb;
static carl_closesocket_callback closesocketcb;
static carl_xferinfo_callback xferinfocb;
static carl_hstsread_callback hstsreadcb;
static carl_hstswrite_callback hstswritecb;
static carl_resolver_start_callback resolver_start_cb;

int test(char *URL)
{
  CARL *carl = NULL;
  CARL *dep = NULL;
  CARLSH *share = NULL;
  char errorbuffer[CARL_ERROR_SIZE];
  void *conv_from_network_cb = NULL;
  void *conv_to_network_cb = NULL;
  void *conv_from_utf8_cb = NULL;
  void *interleavecb = NULL;
  char *stringpointerextra = (char *)"moooo";
  struct carl_slist *slist = NULL;
  struct carl_httppost *httppost = NULL;
  carl_mime *mimepost = NULL;
  FILE *stream = stderr;
  struct data object;
  char *charp;
  long val;
  carl_off_t oval;
  double dval;
  carl_socket_t sockfd;
  struct carl_certinfo *certinfo;
  struct carl_tlssessioninfo *tlssession;
  struct carl_blob blob = { (void *)"silly", 5, 0};
  CARLcode res = CARLE_OK;
  (void)URL; /* not used */
  global_init(CARL_GLOBAL_ALL);
  easy_init(dep);
  easy_init(carl);
  share = carl_share_init();
  if(!share) {
    res = CARLE_OUT_OF_MEMORY;
    goto test_cleanup;
  }

HEADER
    ;

while(<STDIN>) {
    if($_ =~ /^  CARLOPT\(([^ ]*), ([^ ]*), (\d*)\)/) {
        my ($name, $type, $val)=($1, $2, $3);
        my $w="  ";
        my $pref = "${w}res = carl_easy_setopt(carl, $name,";
        my $i = ' ' x (length($w) + 23);
        my $check = "  if(UNEX(res)) {\n    err(\"$name\", res, __LINE__);\n    goto test_cleanup;\n  }\n";
        if($type eq "CARLOPTTYPE_STRINGPOINT") {
            print "${pref} \"string\");\n$check";
            print "${pref} NULL);\n$check";
        }
        elsif(($type eq "CARLOPTTYPE_LONG") ||
              ($type eq "CARLOPTTYPE_VALUES")) {
            print "${pref} 0L);\n$check";
            print "${pref} 22L);\n$check";
            print "${pref} LO);\n$check";
            print "${pref} HI);\n$check";
        }
        elsif(($type eq "CARLOPTTYPE_OBJECTPOINT") ||
              ($type eq "CARLOPTTYPE_CBPOINT")) {
            if($name =~ /DEPENDS/) {
              print "${pref} dep);\n$check";
            }
            elsif($name =~ "SHARE") {
              print "${pref} share);\n$check";
            }
            elsif($name eq "CARLOPT_ERRORBUFFER") {
              print "${pref} errorbuffer);\n$check";
            }
            elsif(($name eq "CARLOPT_POSTFIELDS") ||
                  ($name eq "CARLOPT_COPYPOSTFIELDS")) {
                # set size to zero to avoid it being "illegal"
                print "  (void)carl_easy_setopt(carl, CARLOPT_POSTFIELDSIZE, 0);\n";
                print "${pref} stringpointerextra);\n$check";
            }
            elsif($name eq "CARLOPT_HTTPPOST") {
              print "${pref} httppost);\n$check";
            }
            elsif($name eq "CARLOPT_MIMEPOST") {
              print "${pref} mimepost);\n$check";
            }
            elsif($name eq "CARLOPT_STDERR") {
              print "${pref} stream);\n$check";
            }
            else {
              print "${pref} &object);\n$check";
            }
            print "${pref} NULL);\n$check";
        }
        elsif($type eq "CARLOPTTYPE_SLISTPOINT") {
            print "${pref} slist);\n$check";
        }
        elsif($type eq "CARLOPTTYPE_FUNCTIONPOINT") {
            if($name =~ /([^ ]*)FUNCTION/) {
                my $l=lc($1);
                $l =~ s/^carlopt_//;
                print "${pref}\n$i${l}cb);\n$check";
            }
            else {
                print "${pref} &func);\n$check";
            }
            print "${pref} NULL);\n$check";
        }
        elsif($type eq "CARLOPTTYPE_OFF_T") {
            # play conservative to work with 32bit carl_off_t
            print "${pref} OFF_NO);\n$check";
            print "${pref} OFF_HI);\n$check";
            print "${pref} OFF_LO);\n$check";
        }
        elsif($type eq "CARLOPTTYPE_BLOB") {
            print "${pref} &blob);\n$check";
        }
        else {
            print STDERR "\nUnknown type: $type\n";
            exit 22; # exit to make this noticed!
        }
    }
    elsif($_ =~ /^  CARLINFO_NONE/) {
       $infomode = 1;
    }
    elsif($infomode &&
          ($_ =~ /^  CARLINFO_([^ ]*) *= *CARLINFO_([^ ]*)/)) {
       my ($info, $type)=($1, $2);
       my $c = "  res = carl_easy_getinfo(carl, CARLINFO_$info,";
       my $check = "  if(UNEX(res)) {\n    geterr(\"$info\", res, __LINE__);\n    goto test_cleanup;\n  }\n";
       if($type eq "STRING") {
         print "$c &charp);\n$check";
       }
       elsif($type eq "LONG") {
         print "$c &val);\n$check";
       }
       elsif($type eq "OFF_T") {
         print "$c &oval);\n$check";
       }
       elsif($type eq "DOUBLE") {
         print "$c &dval);\n$check";
       }
       elsif($type eq "SLIST") {
         print "$c &slist);\n$check";
         print "  if(slist)\n    carl_slist_free_all(slist);\n";
       }
       elsif($type eq "SOCKET") {
         print "$c &sockfd);\n$check";
       }
       elsif($type eq "PTR") {
         if($info eq "CERTINFO") {
            print "$c &certinfo);\n$check";
         }
         elsif(($info eq "TLS_SESSION") ||
               ($info eq "TLS_SSL_PTR")) {
            print "$c &tlssession);\n$check";
         }
         else {
            print STDERR "$info/$type is unsupported\n";
         }
       }
       else {
         print STDERR "$type is unsupported\n";
       }
    }
}


print <<FOOTER
  carl_easy_setopt(carl, (CARLoption)1, 0);
  res = CARLE_OK;
test_cleanup:
  carl_easy_cleanup(carl);
  carl_easy_cleanup(dep);
  carl_share_cleanup(share);
  carl_global_cleanup();

  return (int)res;
}
FOOTER
    ;
